import time
import threading
import speech_recognition as sr
from input.transcription import transcribe_audio

# –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ stop_event
CHUNK_TIMEOUT = 0.5       # —Å–µ–∫, —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏
CALIB_DURATION = 0.3      # –±—ã—Å—Ç—Ä–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à—É–º–∞

def _make_recognizer(pause_threshold: float, energy_threshold: float = 300) -> sr.Recognizer:
    r = sr.Recognizer()
    r.pause_threshold = pause_threshold
    r.energy_threshold = energy_threshold
    return r


def listen_full_phrase(
    wake_word: str = "–¥–∂–∞—Ä–≤–∏—Å",
    timeout: float = 8.0,
    pause_threshold: float = 1.2,
    stop_event: threading.Event | None = None,
    phrase_time_limit: float | None = None,
) -> str | None:
    """
    –°–ª—É—à–∞–µ—Ç –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π "" –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ),
      - "‚ùå –°–ª–æ–≤–æ 'Jarvis' –Ω–µ —É—Å–ª—ã—à–∞–ª." –µ—Å–ª–∏ wake word –Ω–µ –Ω–∞–π–¥–µ–Ω,
      - None –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Ç–∞–π–º–∞—É—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞ —Ä–µ—á–∏.

    –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω stop_event, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ CHUNK_TIMEOUT —Å–µ–∫
    –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏. (–í–æ –≤—Ä–µ–º—è —Å–∞–º–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–æ—Å–ª–µ
    –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è listen(), –ø–æ—ç—Ç–æ–º—É –¥–µ—Ä–∂–∏—Ç–µ —Ñ—Ä–∞–∑—ã –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ª–∏–±–æ –∑–∞–¥–∞–π—Ç–µ phrase_time_limit.)
    """
    r = _make_recognizer(pause_threshold)

    with sr.Microphone() as source:
        print("üé§ –°–ª—É—à–∞—é –ø–æ–ª–Ω—É—é —Ñ—Ä–∞–∑—É...")
        try:
            r.adjust_for_ambient_noise(source, duration=CALIB_DURATION)
        except Exception:
            pass

        waited = 0.0
        audio = None

        # –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º-—Å–ª–æ—Ç–∞–º–∏, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ stop
        while waited < timeout:
            if stop_event and stop_event.is_set():
                print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.")
                return ""

            try:
                # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –¥–æ–ª—å—à–µ CHUNK_TIMEOUT
                audio = r.listen(
                    source,
                    timeout=CHUNK_TIMEOUT,
                    phrase_time_limit=phrase_time_limit  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–∑—ã
                )
                print("‚úÖ –§—Ä–∞–∑–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
                break  # —É—à–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å
            except sr.WaitTimeoutError:
                waited += CHUNK_TIMEOUT
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                time.sleep(CHUNK_TIMEOUT)
                waited += CHUNK_TIMEOUT

        if audio is None:
            print("‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
            return

    # –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–∞–ª–∏ —Å—Ç–æ–ø ‚Äî —Å—á–∏—Ç–∞–µ–º –æ—Ç–º–µ–Ω–æ–π
    if stop_event and stop_event.is_set():
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏, –¥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
        return

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º
    text_raw = transcribe_audio(audio)
    if not text_raw:
        print("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
        return

    text = text_raw.lower().strip()
    print(f"[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")

    if wake_word and wake_word in text:
        command = text.split(wake_word, 1)[1].strip()
        print(f"üìã –ö–æ–º–∞–Ω–¥–∞: {command}")
        return command

    print("‚ùå –°–ª–æ–≤–æ 'Jarvis' –Ω–µ —É—Å–ª—ã—à–∞–ª.")
    return


def lisen_nunder(   # –æ—Å—Ç–∞–≤–ª—è—é –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—é stop_event
    timeout: float = 8.0,
    pause_threshold: float = 1.2,
    stop_event: threading.Event | None = None,
    phrase_time_limit: float | None = None,
) -> str:
    """
    –°–ª—É—à–∞–µ—Ç –æ–¥–Ω—É —Ñ—Ä–∞–∑—É –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ª–∏–±–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    r = _make_recognizer(pause_threshold)

    with sr.Microphone() as source:
        print("üé§ –°–ª—É—à–∞—é –≤—ã–±–æ—Ä...")
        try:
            r.adjust_for_ambient_noise(source, duration=CALIB_DURATION)
        except Exception:
            pass

        waited = 0.0
        audio = None
        while waited < timeout:
            if stop_event and stop_event.is_set():
                print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ (–≤—ã–±–æ—Ä).")
                return ""

            try:
                audio = r.listen(
                    source,
                    timeout=CHUNK_TIMEOUT,
                    phrase_time_limit=phrase_time_limit
                )
                print("‚úÖ –§—Ä–∞–∑–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
                break
            except sr.WaitTimeoutError:
                waited += CHUNK_TIMEOUT
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                time.sleep(CHUNK_TIMEOUT)
                waited += CHUNK_TIMEOUT

        if audio is None:
            print("‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
            return

    if stop_event and stop_event.is_set():
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ (–≤—ã–±–æ—Ä).")
        return

    text_raw = transcribe_audio(audio)
    if not text_raw:
        print("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
        return 

    text = text_raw.lower().strip()
    print(f"[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
    return text
